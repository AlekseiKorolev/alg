{"version":3,"sources":["components/task/Task.tsx","tasks/leet-289.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TaskComponent","item","useState","info","setInfo","value","setValue","stringValue","setStringValue","result","setResult","check","setCheck","stringCheck","setStringCheck","canCheck","setCanCheck","isRight","setIsRight","getNumberOfNeighbors","i","j","num","ii","jj","className","title","onClick","task","map","x","rules","text","constraints","followUp","testCases","JSON","stringify","results","onChange","e","target","res","parse","Array","isArray","console","warn","changeValue","resultValue","y","val","rule","length","numOfNeighb","tryIt","changeCheck","disabled","resForCheck","newRes","error","checkIt","leet289","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88e9d501.chunk.js","sourcesContent":["import { ChangeEvent, useState } from 'react';\r\n\r\nimport './Task.css';\r\n\r\nimport { Task } from '../../models/task'\r\n\r\nconst TaskComponent = ({ item }: { item: Task }) => {\r\n    const [info, setInfo] = useState<boolean>(true);\r\n\r\n    const [value, setValue] = useState<number[][]>([[]]);\r\n    const [stringValue, setStringValue] = useState<string>('');\r\n\r\n    const [result, setResult] = useState<{ val: number; rule: number; error?: boolean }[][]>([[]]);\r\n    \r\n    const [check, setCheck] = useState<number[][]>([[]]);\r\n    const [stringCheck, setStringCheck] = useState<string>('');\r\n    \r\n    const [canCheck, setCanCheck] = useState<boolean>(false);\r\n\r\n    const [isRight, setIsRight] = useState<string>('');\r\n\r\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        setStringValue(value);\r\n        try {\r\n            const res = JSON.parse(value);\r\n            if (Array.isArray(res)) {\r\n                setValue(res);\r\n                setResult([]);\r\n                setIsRight('');\r\n                setStringCheck('');\r\n                setCheck([[]]);\r\n                setCanCheck(false);\r\n            }\r\n        } catch (e) {\r\n            console.warn('cannot parse to array');\r\n        }\r\n    }\r\n\r\n    const changeCheck = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        setStringCheck(value);\r\n        try {\r\n            const res = JSON.parse(value);\r\n            if (Array.isArray(res)) {\r\n                setCheck(res);\r\n                setCanCheck(true);\r\n            }\r\n        } catch (e) {\r\n            console.warn('cannot parse to array');\r\n            setCanCheck(false);\r\n        }\r\n\r\n    }\r\n\r\n    const checkIt = () => {\r\n        const resForCheck =  result.map(x => x.map(y => y.val));\r\n        const res = stringCheck === JSON.stringify(resForCheck);\r\n\r\n        if (!res) {\r\n            const newRes = result.map(x => [...x]);\r\n            for (let i = 0; i < newRes.length; i++) {\r\n                for (let j = 0; j < newRes[i].length; j++) {\r\n                    if (newRes[i][j].val !== check[i][j]) {\r\n                        newRes[i][j].error = true;\r\n                    }\r\n                }\r\n            }\r\n            setResult(newRes);\r\n        }\r\n        setIsRight(res ? 'Right answer' : 'Wrong answer');\r\n    }\r\n\r\n    const tryIt = () => {\r\n        const resultValue = value.map(x => x.map(y => ({ val: y, rule: 0 })));\r\n\r\n        for (let i = 0; i < value.length; i++) {\r\n            for (let j = 0; j < value[i].length; j++) {\r\n                const numOfNeighb = getNumberOfNeighbors(i, j, value);\r\n                if (resultValue[i][j].val === 1) {\r\n                    if (numOfNeighb < 2) {\r\n                        resultValue[i][j].val = 0;\r\n                        resultValue[i][j].rule = 1;\r\n                    } else if (numOfNeighb < 4) {\r\n                        resultValue[i][j].val = 1;\r\n                        resultValue[i][j].rule = 2;\r\n                    } else if (numOfNeighb > 3) {\r\n                        resultValue[i][j].val = 0;\r\n                        resultValue[i][j].rule = 3;\r\n                    }\r\n                } else {\r\n                    if (numOfNeighb === 3) {\r\n                        resultValue[i][j].val = 1;\r\n                        resultValue[i][j].rule = 4;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        setResult(resultValue);\r\n    }\r\n\r\n    const getNumberOfNeighbors = (i: number, j: number, value: number[][]) => {\r\n        let num = 0;\r\n        for (let ii = i - 1; ii <= i + 1; ii++) {\r\n            for (let jj = j - 1; jj <= j + 1; jj++) {\r\n                if (ii === i && jj === j) {\r\n                    continue;\r\n                }\r\n                if (value?.[ii]?.[jj] === 1) {\r\n                    num++;\r\n                }\r\n            }\r\n        }\r\n        return num;\r\n    }\r\n\r\n    const columDir = () => {\r\n        return value.length > 10;\r\n    }\r\n\r\n    return (\r\n        <div className=\"task-container\">\r\n            <div className=\"item main-title\">{item?.title}</div>\r\n            {info ? <div className=\"info\">\r\n                <div className=\"item title\" onClick={() => setInfo(!info)}>Task</div>\r\n                <div className=\"item task\">\r\n                    {item?.task?.map(x => <div>{x}</div>)}\r\n                </div>\r\n                <div className=\"item rules\">\r\n                    {item?.rules?.map(x => <div>{x}</div>)}\r\n                </div>\r\n                <div className=\"item task\">{item?.text}</div>\r\n                <div className=\"item title\">Constraints</div>\r\n                <div className=\"item constraints\">\r\n                    {item?.constraints?.map(x => <div>{x}</div>)}\r\n                </div>\r\n                <div className=\"item title\">Follow up</div>\r\n                <div className=\"item follow-up\">{item?.followUp}</div>\r\n                <div className=\"item title\">Examples</div>\r\n                {item?.testCases?.map((x, i) => (\r\n                    <div className=\"item test-cases\">\r\n                        <div>Input: {JSON.stringify(x)}</div>\r\n                        <div>Output: {JSON.stringify(item?.results?.[i])}</div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n                : <div className=\"info\" onClick={() => setInfo(!info)}>Info (click to expand)</div>}\r\n\r\n            <div className=\"input-data\">\r\n                <span>Input</span><input value={stringValue} onChange={(e) => changeValue(e)}></input>\r\n                <button onClick={() => tryIt()}>Try It</button>\r\n            </div>\r\n\r\n            <div className=\"input-data\">\r\n                <span>Expected</span><input value={stringCheck} onChange={(e) => changeCheck(e)}></input>\r\n                <button disabled={!canCheck} onClick={() => checkIt()}>Check It</button>\r\n            </div>\r\n\r\n            <div className=\"verify\">{isRight}</div>\r\n\r\n            <div className={`show-box ${columDir() ? \"column\" : \"\"}`}>\r\n                <div className=\"input-box\">\r\n                    {value.map((x: any, i: number) => (\r\n                        <div key={`inputbox-row${i}`} className=\"row\">\r\n                            {x.map((y: any, j: number) => <div key={`inputbox-cell${i}${j}`} className=\"cell\">{y}</div>)}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                {result && <div className=\"out-box\">\r\n                    {result.map((x: any, i: number) => (\r\n                        <div key={`outbox-row${i}`} className=\"row\">\r\n                            {x.map((y: any, j: number) => (\r\n                                <div key={`outbox-cell${i}${j}`} className={`cell color${y.rule} ${y.error ? \"error\" : \"\"}`}>{y.val}</div>)\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>}\r\n            </div>\r\n\r\n            <div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskComponent;","import { Task } from \"../models/task\";\r\n\r\nconst leet289: Task = {\r\n    title: 'Game of Life',\r\n    path: 'https://leetcode.com/problems/game-of-life/',\r\n    task: [\r\n        'According to Wikipedia\\'s article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"',\r\n        'The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):',\r\n    ],\r\n    rules: [\r\n        '1. Any live cell with fewer than two live neighbors dies as if caused by under-population.',\r\n        '2. Any live cell with two or three live neighbors lives on to the next generation.',\r\n        '3. Any live cell with more than three live neighbors dies, as if by over-population.',\r\n        '4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.' \r\n    ],\r\n    text: 'The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the m x n grid board, return the next state.',\r\n    constraints: [\r\n        'm == board.length',\r\n        'n == board[i].length',\r\n        '1 <= m, n <= 25',\r\n        'board[i][j] is 0 or 1'\r\n    ],\r\n    followUp: `\r\n        Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.\r\n        In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?\r\n    `,\r\n    testCases: [\r\n        [[0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0]],\r\n        [[1, 1], [1, 0]]\r\n    ],\r\n    results: [\r\n        [[0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0]],\r\n        [[1, 1], [1, 1]]\r\n    ]\r\n}\r\n\r\nexport default leet289;","import './App.css';\n\nimport TaskComponent from './components/task/Task';\n\nimport leet289 from './tasks/leet-289';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <TaskComponent item={leet289}></TaskComponent>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}